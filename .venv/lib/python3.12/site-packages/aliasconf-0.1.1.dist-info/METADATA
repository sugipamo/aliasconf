Metadata-Version: 2.4
Name: aliasconf
Version: 0.1.1
Summary: Configuration management with powerful alias support for multiple key access
Project-URL: Homepage, https://github.com/sugipamo/aliasconf
Project-URL: Documentation, https://github.com/sugipamo/aliasconf#readme
Project-URL: Repository, https://github.com/sugipamo/aliasconf
Project-URL: Issues, https://github.com/sugipamo/aliasconf/issues
Author-email: Sugipamo <sugipamo@example.com>
License: MIT
License-File: LICENSE
Keywords: alias,config,configuration,hierarchy,json,settings,tree,yaml
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Provides-Extra: dev
Requires-Dist: black>=22.0; extra == 'dev'
Requires-Dist: isort>=5.0; extra == 'dev'
Requires-Dist: mypy>=1.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0; extra == 'dev'
Requires-Dist: pytest>=7.0; extra == 'dev'
Requires-Dist: pyyaml>=6.0; extra == 'dev'
Requires-Dist: ruff>=0.1.0; extra == 'dev'
Requires-Dist: types-pyyaml>=6.0.12; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs-material>=8.0; extra == 'docs'
Requires-Dist: mkdocs>=1.4; extra == 'docs'
Requires-Dist: mkdocstrings[python]>=0.20; extra == 'docs'
Description-Content-Type: text/markdown

# AliasConf

üîß **Configuration management with powerful alias support**

AliasConf is a Python library that provides flexible configuration management with a unique focus on **alias support**. It allows you to access the same configuration values through multiple different names, making your configurations more intuitive and migration-friendly.

## ‚ú® Key Features

- üè∑Ô∏è **Multiple Aliases**: Access the same configuration value through different names
- üå≥ **Tree Structure**: Hierarchical configuration with parent-child relationships  
- üîç **Smart Resolution**: BFS-based efficient configuration path resolution
- üìù **Template Expansion**: Dynamic variable substitution with `{key}` syntax
- üõ°Ô∏è **Type Safety**: Type-safe configuration access with automatic conversion
- üìÅ **Multiple Formats**: Support for YAML, JSON, and Python dictionaries
- ‚ö° **High Performance**: Optimized with caching and efficient algorithms

## üöÄ Quick Start

### Installation

```bash
pip install aliasconf
```

### Basic Usage

```python
from aliasconf import ConfigManager

# Load from dictionary
config_dict = {
    "python": {
        "aliases": ["py", "python3"],  # Multiple names for the same config
        "timeout": 30,
        "command": "python {script}"
    },
    "database": {
        "host": "localhost",
        "port": 5432
    }
}

config = ConfigManager.from_dict(config_dict)

# Access same value through different aliases
timeout1 = config.get("python.timeout", int)   # 30
timeout2 = config.get("py.timeout", int)       # 30 (same value!)
timeout3 = config.get("python3.timeout", int)  # 30 (same value!)

# Type-safe access
port = config.get("database.port", int)        # Returns int: 5432
host = config.get("database.host", str)        # Returns str: "localhost"

# Template formatting
command = config.get_formatted("python.command", {"script": "test.py"})
print(command)  # "python test.py"
```

### Load from Files

```python
# Load from YAML file
config = ConfigManager.from_file("config.yaml")

# Load and merge multiple files
config = ConfigManager.from_files(
    "base_config.yaml",
    "environment_config.yaml", 
    "local_config.yaml"
)
```

## üìñ Configuration Examples

### YAML Configuration with Aliases

```yaml
# config.yaml
python:
  aliases: ["py", "python3"]
  timeout: 30
  command: "python {script}"
  
cpp:
  aliases: ["c++", "cxx"]  
  timeout: 60
  command: "g++ {source} -o {output}"

database:
  host: "localhost"
  port: 5432
  url: "postgresql://{host}:{port}/mydb"
```

### JSON Configuration

```json
{
  "python": {
    "aliases": ["py", "python3"],
    "timeout": 30,
    "command": "python {script}"
  },
  "settings": {
    "debug": true,
    "log_level": "INFO"
  }
}
```

## üîß Advanced Features

### Template Variable Expansion

```python
config_dict = {
    "app": {
        "name": "MyApp",
        "version": "1.0.0"
    },
    "messages": {
        "welcome": "Welcome to {name} v{version}!",
        "goodbye": "Thanks for using {name}!"
    }
}

config = ConfigManager.from_dict(config_dict)

# Template expansion with context
message = config.get_formatted("messages.welcome", {
    "name": config.get("app.name", str),
    "version": config.get("app.version", str)
})
print(message)  # "Welcome to MyApp v1.0.0!"
```

### Configuration Merging

```python
base_config = ConfigManager.from_dict({
    "app": {"name": "MyApp", "debug": False}
})

dev_config = ConfigManager.from_dict({
    "app": {"debug": True},
    "database": {"host": "localhost"}
})

# Merge configurations (dev_config takes precedence)
merged = base_config.merge(dev_config)
```

### Type Conversion

```python
# Automatic type conversion
timeout = config.get("python.timeout", int)        # int
debug = config.get("app.debug", bool)              # bool  
version = config.get("app.version", str)           # str
ratio = config.get("performance.ratio", float)     # float

# With defaults
max_workers = config.get("workers.max", int, 4)    # Default: 4
```

## üÜö Why AliasConf?

### Comparison with Other Libraries

| Feature | AliasConf | Pydantic | OmegaConf | Dynaconf |
|---------|-----------|----------|-----------|----------|
| Multiple Aliases | ‚úÖ **Native** | ‚ùå Limited | ‚ùå No | ‚ö†Ô∏è Manual |
| Type Safety | ‚úÖ Yes | ‚úÖ Yes | ‚úÖ Yes | ‚ö†Ô∏è Limited |
| Template Expansion | ‚úÖ Advanced | ‚ùå No | ‚úÖ Basic | ‚úÖ Yes |
| File Merging | ‚úÖ Yes | ‚ùå Manual | ‚úÖ Yes | ‚úÖ Yes |
| Learning Curve | üü¢ Easy | üü° Medium | üü° Medium | üü° Medium |

### The Alias Advantage

```python
# With AliasConf - One configuration, multiple access patterns
config = {
    "python": {
        "aliases": ["py", "python3", "python-lang"],
        "timeout": 30
    }
}

# All of these work and return the same value:
config.get("python.timeout", int)      # 30
config.get("py.timeout", int)          # 30  
config.get("python3.timeout", int)     # 30
config.get("python-lang.timeout", int) # 30

# Perfect for:
# - API backwards compatibility
# - Team migration from old naming conventions  
# - Supporting multiple naming styles
# - Gradual refactoring
```

## üß™ Testing

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Run tests with coverage
pytest --cov=src/aliasconf --cov-report=html
```

## üìö Documentation

- [Full Documentation](https://aliasconf.readthedocs.io/)
- [API Reference](https://aliasconf.readthedocs.io/en/latest/api/)
- [Examples](https://github.com/username/aliasconf/tree/main/examples)

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Inspired by the need for better configuration alias support
- Built with performance and usability in mind
- Designed for real-world configuration management challenges

---

‚≠ê **Star this repository if you find it useful!**